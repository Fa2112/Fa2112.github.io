---
import Project from "./Project.astro";
---

<section
  id="projects"
  class="w-screen h-screen relative overflow-hidden flex flex-col z-20 bg-black snap-start"
>
  <div
    id="proyectosLabel"
    class="absolute top-1/2 left-0 translate-x-1/2 font-strong laptop:text-[8rem] leading-[8rem] text-white -translate-y-1/2"
  >
    PROJECTS
  </div>
  <div
    id="arrow"
    class="absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-3/4"
  >
    <span class="material-symbols-outlined"> keyboard_double_arrow_left </span>
  </div>
  <div
    id="projects-container"
    data-mouse-down-at="0"
    data-percentage="0"
    data-prev-percentage="0"
    class="w-[200vw] laptop:w-screen flex gap-[4vmin] left-1/2 absolute -translate-y-1/2 top-1/2 transition-transform duration-[50ms]"
  >
    <Project />
    <Project />
    <Project />
    <Project />
  </div>

  <style>
    .projectElement a img {
      width: 240vmin;
      height: 84vmin;
      object-fit: cover;
      object-position: right center;
    }
    .material-symbols-outlined {
      color: white;
    }
  </style>
  <script>
    const projectsContainer = document.getElementById("projects-container");
    const links = document.querySelectorAll("a");
    const ableLinks = function () {
      setTimeout(() => {
        links.forEach((link) => {
          link.style.pointerEvents = "auto";
        });
      }, 10);
    };
    window.onmousedown = (e: MouseEvent) => {
      projectsContainer.dataset.mouseDownAt = "" + e.clientX + "";
    };
    window.onmouseup = (e: MouseEvent) => {
      projectsContainer.dataset.mouseDownAt = "0";
      projectsContainer.dataset.prevPercentage =
        projectsContainer.dataset.percentage;

      ableLinks();
    };

    let startX;
    let currentX = 0;
    window.ontouchstart = (e: TouchEvent) => {
      startX = e.touches[0].clientX;
    };

    window.ontouchmove = (e: TouchEvent) => {
      const touchDelta = e.touches[0].clientX - startX,
        maxDelta = window.innerWidth / 2,
        percentage = touchDelta / maxDelta,
        unrestrained = (currentX += percentage),
        nextPercentage =
          unrestrained < 0
            ? Math.max(-100, currentX + percentage)
            : Math.min(0, currentX + percentage);
      currentX = nextPercentage;

      projectsContainer.animate(
        { transform: `translate( ${nextPercentage}%, -50%)` },
        { duration: 1200, fill: "forwards" }
      );
      document.getElementById("proyectosLabel").animate(
        {
          opacity: Math.max(
            ((nextPercentage + 0.1) * 2 + 100) / 100,
            0
          ).toFixed(1),
        },
        { duration: 100, fill: "forwards" }
      );
      document.getElementById("arrow").animate(
        {
          opacity: Math.max((nextPercentage * 4 + 100) / 100, 0).toFixed(1),
        },
        { duration: 100, fill: "forwards" }
      );
      for (const project of projectsContainer.querySelectorAll("img")) {
        project.animate(
          { objectPosition: `${nextPercentage + 100}% 50%` },
          { duration: 2000, fill: "forwards" }
        );
      }
    };

    window.ontouchend = () => {
      startX = null;
    };

    window.onmousemove = (e: MouseEvent) => {
      if (projectsContainer.dataset.mouseDownAt === "0") return;
      const mouseDelta =
          parseFloat(projectsContainer.dataset.mouseDownAt) - e.clientX,
        maxDelta = window.innerWidth / 2,
        percentage = (mouseDelta / maxDelta) * -100,
        unrestrained =
          parseFloat(projectsContainer.dataset.prevPercentage) + percentage,
        nextPercentage =
          unrestrained < 0
            ? Math.max(-100, unrestrained)
            : Math.min(0, unrestrained);
      console.log(unrestrained);
      links.forEach((link) => {
        link.style.pointerEvents = "none";
      });

      projectsContainer.dataset.percentage = nextPercentage + "";
      // console.log(
      //   `percentage: ${percentage} prevPercentage: ${projectsContainer.dataset.prevPercentage} translate( ${nextPercentage}%, 50%)`
      // );
      projectsContainer.animate(
        { transform: `translate( ${nextPercentage}%, -50%)` },
        { duration: 1200, fill: "forwards" }
      );
      document.getElementById("proyectosLabel").animate(
        {
          opacity: Math.max(
            ((nextPercentage + 0.1) * 2 + 100) / 100,
            0
          ).toFixed(1),
        },
        { duration: 100, fill: "forwards" }
      );
      document.getElementById("arrow").animate(
        {
          opacity: Math.max((nextPercentage * 4 + 100) / 100, 0).toFixed(1),
        },
        { duration: 100, fill: "forwards" }
      );
      for (const project of projectsContainer.querySelectorAll("img")) {
        project.animate(
          { objectPosition: `${nextPercentage + 100}% 50%` },
          { duration: 2000, fill: "forwards" }
        );
      }
    };
  </script>
</section>
